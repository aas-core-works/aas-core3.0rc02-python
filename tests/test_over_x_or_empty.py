# This code has been automatically generated by:
# dev_scripts/generate_test_for_over_X_or_empty.py
# Do NOT edit or append.


"""Test ``over_X_or_empty`` methods."""


# pylint: disable=missing-docstring


import unittest

import tests.common
import tests.common_jsonization


class Test_Extension(unittest.TestCase):
    """
    Test ``over_X_or_default`` on instances of
    :py:class:`aas_core3_rc02.types.Extension`.
    """

    def test_over_supplemental_semantic_ids_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_extension()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Extension"
            / "on_complete.json"
            / "over_supplemental_semantic_ids_or_empty.trace"
        )

        log = [
            tests.common.trace(list(instance.over_supplemental_semantic_ids_or_empty()))
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_supplemental_semantic_ids_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_extension()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Extension"
            / "on_minimal.json"
            / "over_supplemental_semantic_ids_or_empty.trace"
        )

        log = [
            tests.common.trace(list(instance.over_supplemental_semantic_ids_or_empty()))
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)


class Test_AdministrativeInformation(unittest.TestCase):
    """
    Test ``over_X_or_default`` on instances of
    :py:class:`aas_core3_rc02.types.AdministrativeInformation`.
    """

    def test_over_embedded_data_specifications_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_administrative_information()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "AdministrativeInformation"
            / "on_complete.json"
            / "over_embedded_data_specifications_or_empty.trace"
        )

        log = [
            tests.common.trace(
                list(instance.over_embedded_data_specifications_or_empty())
            )
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_embedded_data_specifications_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_administrative_information()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "AdministrativeInformation"
            / "on_minimal.json"
            / "over_embedded_data_specifications_or_empty.trace"
        )

        log = [
            tests.common.trace(
                list(instance.over_embedded_data_specifications_or_empty())
            )
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)


class Test_Qualifier(unittest.TestCase):
    """
    Test ``over_X_or_default`` on instances of
    :py:class:`aas_core3_rc02.types.Qualifier`.
    """

    def test_over_supplemental_semantic_ids_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_qualifier()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Qualifier"
            / "on_complete.json"
            / "over_supplemental_semantic_ids_or_empty.trace"
        )

        log = [
            tests.common.trace(list(instance.over_supplemental_semantic_ids_or_empty()))
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_supplemental_semantic_ids_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_qualifier()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Qualifier"
            / "on_minimal.json"
            / "over_supplemental_semantic_ids_or_empty.trace"
        )

        log = [
            tests.common.trace(list(instance.over_supplemental_semantic_ids_or_empty()))
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)


class Test_AssetAdministrationShell(unittest.TestCase):
    """
    Test ``over_X_or_default`` on instances of
    :py:class:`aas_core3_rc02.types.AssetAdministrationShell`.
    """

    def test_over_extensions_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_asset_administration_shell()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "AssetAdministrationShell"
            / "on_complete.json"
            / "over_extensions_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_extensions_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_extensions_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_asset_administration_shell()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "AssetAdministrationShell"
            / "on_minimal.json"
            / "over_extensions_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_extensions_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_display_name_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_asset_administration_shell()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "AssetAdministrationShell"
            / "on_complete.json"
            / "over_display_name_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_display_name_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_display_name_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_asset_administration_shell()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "AssetAdministrationShell"
            / "on_minimal.json"
            / "over_display_name_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_display_name_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_description_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_asset_administration_shell()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "AssetAdministrationShell"
            / "on_complete.json"
            / "over_description_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_description_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_description_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_asset_administration_shell()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "AssetAdministrationShell"
            / "on_minimal.json"
            / "over_description_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_description_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_embedded_data_specifications_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_asset_administration_shell()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "AssetAdministrationShell"
            / "on_complete.json"
            / "over_embedded_data_specifications_or_empty.trace"
        )

        log = [
            tests.common.trace(
                list(instance.over_embedded_data_specifications_or_empty())
            )
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_embedded_data_specifications_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_asset_administration_shell()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "AssetAdministrationShell"
            / "on_minimal.json"
            / "over_embedded_data_specifications_or_empty.trace"
        )

        log = [
            tests.common.trace(
                list(instance.over_embedded_data_specifications_or_empty())
            )
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_submodels_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_asset_administration_shell()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "AssetAdministrationShell"
            / "on_complete.json"
            / "over_submodels_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_submodels_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_submodels_or_empty_on_minimal_instance_against_recorded(self) -> None:
        instance = tests.common_jsonization.load_minimal_asset_administration_shell()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "AssetAdministrationShell"
            / "on_minimal.json"
            / "over_submodels_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_submodels_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)


class Test_AssetInformation(unittest.TestCase):
    """
    Test ``over_X_or_default`` on instances of
    :py:class:`aas_core3_rc02.types.AssetInformation`.
    """

    def test_over_specific_asset_ids_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_asset_information()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "AssetInformation"
            / "on_complete.json"
            / "over_specific_asset_ids_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_specific_asset_ids_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_specific_asset_ids_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_asset_information()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "AssetInformation"
            / "on_minimal.json"
            / "over_specific_asset_ids_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_specific_asset_ids_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)


class Test_SpecificAssetId(unittest.TestCase):
    """
    Test ``over_X_or_default`` on instances of
    :py:class:`aas_core3_rc02.types.SpecificAssetId`.
    """

    def test_over_supplemental_semantic_ids_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_specific_asset_id()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "SpecificAssetId"
            / "on_complete.json"
            / "over_supplemental_semantic_ids_or_empty.trace"
        )

        log = [
            tests.common.trace(list(instance.over_supplemental_semantic_ids_or_empty()))
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_supplemental_semantic_ids_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_specific_asset_id()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "SpecificAssetId"
            / "on_minimal.json"
            / "over_supplemental_semantic_ids_or_empty.trace"
        )

        log = [
            tests.common.trace(list(instance.over_supplemental_semantic_ids_or_empty()))
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)


class Test_Submodel(unittest.TestCase):
    """
    Test ``over_X_or_default`` on instances of
    :py:class:`aas_core3_rc02.types.Submodel`.
    """

    def test_over_extensions_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_submodel()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Submodel"
            / "on_complete.json"
            / "over_extensions_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_extensions_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_extensions_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_submodel()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Submodel"
            / "on_minimal.json"
            / "over_extensions_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_extensions_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_display_name_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_submodel()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Submodel"
            / "on_complete.json"
            / "over_display_name_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_display_name_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_display_name_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_submodel()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Submodel"
            / "on_minimal.json"
            / "over_display_name_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_display_name_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_description_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_submodel()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Submodel"
            / "on_complete.json"
            / "over_description_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_description_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_description_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_submodel()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Submodel"
            / "on_minimal.json"
            / "over_description_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_description_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_supplemental_semantic_ids_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_submodel()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Submodel"
            / "on_complete.json"
            / "over_supplemental_semantic_ids_or_empty.trace"
        )

        log = [
            tests.common.trace(list(instance.over_supplemental_semantic_ids_or_empty()))
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_supplemental_semantic_ids_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_submodel()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Submodel"
            / "on_minimal.json"
            / "over_supplemental_semantic_ids_or_empty.trace"
        )

        log = [
            tests.common.trace(list(instance.over_supplemental_semantic_ids_or_empty()))
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_qualifiers_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_submodel()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Submodel"
            / "on_complete.json"
            / "over_qualifiers_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_qualifiers_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_qualifiers_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_submodel()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Submodel"
            / "on_minimal.json"
            / "over_qualifiers_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_qualifiers_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_embedded_data_specifications_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_submodel()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Submodel"
            / "on_complete.json"
            / "over_embedded_data_specifications_or_empty.trace"
        )

        log = [
            tests.common.trace(
                list(instance.over_embedded_data_specifications_or_empty())
            )
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_embedded_data_specifications_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_submodel()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Submodel"
            / "on_minimal.json"
            / "over_embedded_data_specifications_or_empty.trace"
        )

        log = [
            tests.common.trace(
                list(instance.over_embedded_data_specifications_or_empty())
            )
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_submodel_elements_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_submodel()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Submodel"
            / "on_complete.json"
            / "over_submodel_elements_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_submodel_elements_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_submodel_elements_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_submodel()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Submodel"
            / "on_minimal.json"
            / "over_submodel_elements_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_submodel_elements_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)


class Test_RelationshipElement(unittest.TestCase):
    """
    Test ``over_X_or_default`` on instances of
    :py:class:`aas_core3_rc02.types.RelationshipElement`.
    """

    def test_over_extensions_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_relationship_element()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "RelationshipElement"
            / "on_complete.json"
            / "over_extensions_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_extensions_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_extensions_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_relationship_element()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "RelationshipElement"
            / "on_minimal.json"
            / "over_extensions_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_extensions_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_display_name_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_relationship_element()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "RelationshipElement"
            / "on_complete.json"
            / "over_display_name_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_display_name_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_display_name_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_relationship_element()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "RelationshipElement"
            / "on_minimal.json"
            / "over_display_name_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_display_name_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_description_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_relationship_element()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "RelationshipElement"
            / "on_complete.json"
            / "over_description_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_description_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_description_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_relationship_element()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "RelationshipElement"
            / "on_minimal.json"
            / "over_description_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_description_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_supplemental_semantic_ids_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_relationship_element()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "RelationshipElement"
            / "on_complete.json"
            / "over_supplemental_semantic_ids_or_empty.trace"
        )

        log = [
            tests.common.trace(list(instance.over_supplemental_semantic_ids_or_empty()))
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_supplemental_semantic_ids_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_relationship_element()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "RelationshipElement"
            / "on_minimal.json"
            / "over_supplemental_semantic_ids_or_empty.trace"
        )

        log = [
            tests.common.trace(list(instance.over_supplemental_semantic_ids_or_empty()))
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_qualifiers_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_relationship_element()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "RelationshipElement"
            / "on_complete.json"
            / "over_qualifiers_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_qualifiers_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_qualifiers_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_relationship_element()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "RelationshipElement"
            / "on_minimal.json"
            / "over_qualifiers_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_qualifiers_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_embedded_data_specifications_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_relationship_element()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "RelationshipElement"
            / "on_complete.json"
            / "over_embedded_data_specifications_or_empty.trace"
        )

        log = [
            tests.common.trace(
                list(instance.over_embedded_data_specifications_or_empty())
            )
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_embedded_data_specifications_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_relationship_element()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "RelationshipElement"
            / "on_minimal.json"
            / "over_embedded_data_specifications_or_empty.trace"
        )

        log = [
            tests.common.trace(
                list(instance.over_embedded_data_specifications_or_empty())
            )
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)


class Test_SubmodelElementList(unittest.TestCase):
    """
    Test ``over_X_or_default`` on instances of
    :py:class:`aas_core3_rc02.types.SubmodelElementList`.
    """

    def test_over_extensions_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_submodel_element_list()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "SubmodelElementList"
            / "on_complete.json"
            / "over_extensions_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_extensions_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_extensions_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_submodel_element_list()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "SubmodelElementList"
            / "on_minimal.json"
            / "over_extensions_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_extensions_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_display_name_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_submodel_element_list()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "SubmodelElementList"
            / "on_complete.json"
            / "over_display_name_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_display_name_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_display_name_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_submodel_element_list()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "SubmodelElementList"
            / "on_minimal.json"
            / "over_display_name_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_display_name_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_description_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_submodel_element_list()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "SubmodelElementList"
            / "on_complete.json"
            / "over_description_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_description_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_description_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_submodel_element_list()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "SubmodelElementList"
            / "on_minimal.json"
            / "over_description_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_description_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_supplemental_semantic_ids_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_submodel_element_list()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "SubmodelElementList"
            / "on_complete.json"
            / "over_supplemental_semantic_ids_or_empty.trace"
        )

        log = [
            tests.common.trace(list(instance.over_supplemental_semantic_ids_or_empty()))
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_supplemental_semantic_ids_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_submodel_element_list()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "SubmodelElementList"
            / "on_minimal.json"
            / "over_supplemental_semantic_ids_or_empty.trace"
        )

        log = [
            tests.common.trace(list(instance.over_supplemental_semantic_ids_or_empty()))
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_qualifiers_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_submodel_element_list()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "SubmodelElementList"
            / "on_complete.json"
            / "over_qualifiers_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_qualifiers_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_qualifiers_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_submodel_element_list()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "SubmodelElementList"
            / "on_minimal.json"
            / "over_qualifiers_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_qualifiers_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_embedded_data_specifications_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_submodel_element_list()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "SubmodelElementList"
            / "on_complete.json"
            / "over_embedded_data_specifications_or_empty.trace"
        )

        log = [
            tests.common.trace(
                list(instance.over_embedded_data_specifications_or_empty())
            )
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_embedded_data_specifications_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_submodel_element_list()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "SubmodelElementList"
            / "on_minimal.json"
            / "over_embedded_data_specifications_or_empty.trace"
        )

        log = [
            tests.common.trace(
                list(instance.over_embedded_data_specifications_or_empty())
            )
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_value_or_empty_on_complete_instance_against_recorded(self) -> None:
        instance = tests.common_jsonization.load_complete_submodel_element_list()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "SubmodelElementList"
            / "on_complete.json"
            / "over_value_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_value_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_value_or_empty_on_minimal_instance_against_recorded(self) -> None:
        instance = tests.common_jsonization.load_minimal_submodel_element_list()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "SubmodelElementList"
            / "on_minimal.json"
            / "over_value_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_value_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)


class Test_SubmodelElementCollection(unittest.TestCase):
    """
    Test ``over_X_or_default`` on instances of
    :py:class:`aas_core3_rc02.types.SubmodelElementCollection`.
    """

    def test_over_extensions_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_submodel_element_collection()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "SubmodelElementCollection"
            / "on_complete.json"
            / "over_extensions_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_extensions_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_extensions_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_submodel_element_collection()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "SubmodelElementCollection"
            / "on_minimal.json"
            / "over_extensions_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_extensions_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_display_name_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_submodel_element_collection()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "SubmodelElementCollection"
            / "on_complete.json"
            / "over_display_name_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_display_name_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_display_name_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_submodel_element_collection()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "SubmodelElementCollection"
            / "on_minimal.json"
            / "over_display_name_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_display_name_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_description_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_submodel_element_collection()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "SubmodelElementCollection"
            / "on_complete.json"
            / "over_description_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_description_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_description_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_submodel_element_collection()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "SubmodelElementCollection"
            / "on_minimal.json"
            / "over_description_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_description_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_supplemental_semantic_ids_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_submodel_element_collection()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "SubmodelElementCollection"
            / "on_complete.json"
            / "over_supplemental_semantic_ids_or_empty.trace"
        )

        log = [
            tests.common.trace(list(instance.over_supplemental_semantic_ids_or_empty()))
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_supplemental_semantic_ids_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_submodel_element_collection()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "SubmodelElementCollection"
            / "on_minimal.json"
            / "over_supplemental_semantic_ids_or_empty.trace"
        )

        log = [
            tests.common.trace(list(instance.over_supplemental_semantic_ids_or_empty()))
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_qualifiers_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_submodel_element_collection()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "SubmodelElementCollection"
            / "on_complete.json"
            / "over_qualifiers_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_qualifiers_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_qualifiers_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_submodel_element_collection()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "SubmodelElementCollection"
            / "on_minimal.json"
            / "over_qualifiers_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_qualifiers_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_embedded_data_specifications_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_submodel_element_collection()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "SubmodelElementCollection"
            / "on_complete.json"
            / "over_embedded_data_specifications_or_empty.trace"
        )

        log = [
            tests.common.trace(
                list(instance.over_embedded_data_specifications_or_empty())
            )
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_embedded_data_specifications_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_submodel_element_collection()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "SubmodelElementCollection"
            / "on_minimal.json"
            / "over_embedded_data_specifications_or_empty.trace"
        )

        log = [
            tests.common.trace(
                list(instance.over_embedded_data_specifications_or_empty())
            )
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_value_or_empty_on_complete_instance_against_recorded(self) -> None:
        instance = tests.common_jsonization.load_complete_submodel_element_collection()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "SubmodelElementCollection"
            / "on_complete.json"
            / "over_value_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_value_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_value_or_empty_on_minimal_instance_against_recorded(self) -> None:
        instance = tests.common_jsonization.load_minimal_submodel_element_collection()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "SubmodelElementCollection"
            / "on_minimal.json"
            / "over_value_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_value_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)


class Test_Property(unittest.TestCase):
    """
    Test ``over_X_or_default`` on instances of
    :py:class:`aas_core3_rc02.types.Property`.
    """

    def test_over_extensions_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_property()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Property"
            / "on_complete.json"
            / "over_extensions_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_extensions_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_extensions_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_property()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Property"
            / "on_minimal.json"
            / "over_extensions_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_extensions_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_display_name_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_property()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Property"
            / "on_complete.json"
            / "over_display_name_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_display_name_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_display_name_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_property()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Property"
            / "on_minimal.json"
            / "over_display_name_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_display_name_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_description_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_property()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Property"
            / "on_complete.json"
            / "over_description_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_description_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_description_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_property()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Property"
            / "on_minimal.json"
            / "over_description_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_description_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_supplemental_semantic_ids_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_property()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Property"
            / "on_complete.json"
            / "over_supplemental_semantic_ids_or_empty.trace"
        )

        log = [
            tests.common.trace(list(instance.over_supplemental_semantic_ids_or_empty()))
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_supplemental_semantic_ids_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_property()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Property"
            / "on_minimal.json"
            / "over_supplemental_semantic_ids_or_empty.trace"
        )

        log = [
            tests.common.trace(list(instance.over_supplemental_semantic_ids_or_empty()))
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_qualifiers_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_property()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Property"
            / "on_complete.json"
            / "over_qualifiers_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_qualifiers_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_qualifiers_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_property()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Property"
            / "on_minimal.json"
            / "over_qualifiers_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_qualifiers_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_embedded_data_specifications_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_property()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Property"
            / "on_complete.json"
            / "over_embedded_data_specifications_or_empty.trace"
        )

        log = [
            tests.common.trace(
                list(instance.over_embedded_data_specifications_or_empty())
            )
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_embedded_data_specifications_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_property()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Property"
            / "on_minimal.json"
            / "over_embedded_data_specifications_or_empty.trace"
        )

        log = [
            tests.common.trace(
                list(instance.over_embedded_data_specifications_or_empty())
            )
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)


class Test_MultiLanguageProperty(unittest.TestCase):
    """
    Test ``over_X_or_default`` on instances of
    :py:class:`aas_core3_rc02.types.MultiLanguageProperty`.
    """

    def test_over_extensions_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_multi_language_property()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "MultiLanguageProperty"
            / "on_complete.json"
            / "over_extensions_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_extensions_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_extensions_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_multi_language_property()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "MultiLanguageProperty"
            / "on_minimal.json"
            / "over_extensions_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_extensions_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_display_name_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_multi_language_property()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "MultiLanguageProperty"
            / "on_complete.json"
            / "over_display_name_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_display_name_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_display_name_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_multi_language_property()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "MultiLanguageProperty"
            / "on_minimal.json"
            / "over_display_name_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_display_name_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_description_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_multi_language_property()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "MultiLanguageProperty"
            / "on_complete.json"
            / "over_description_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_description_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_description_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_multi_language_property()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "MultiLanguageProperty"
            / "on_minimal.json"
            / "over_description_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_description_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_supplemental_semantic_ids_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_multi_language_property()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "MultiLanguageProperty"
            / "on_complete.json"
            / "over_supplemental_semantic_ids_or_empty.trace"
        )

        log = [
            tests.common.trace(list(instance.over_supplemental_semantic_ids_or_empty()))
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_supplemental_semantic_ids_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_multi_language_property()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "MultiLanguageProperty"
            / "on_minimal.json"
            / "over_supplemental_semantic_ids_or_empty.trace"
        )

        log = [
            tests.common.trace(list(instance.over_supplemental_semantic_ids_or_empty()))
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_qualifiers_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_multi_language_property()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "MultiLanguageProperty"
            / "on_complete.json"
            / "over_qualifiers_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_qualifiers_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_qualifiers_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_multi_language_property()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "MultiLanguageProperty"
            / "on_minimal.json"
            / "over_qualifiers_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_qualifiers_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_embedded_data_specifications_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_multi_language_property()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "MultiLanguageProperty"
            / "on_complete.json"
            / "over_embedded_data_specifications_or_empty.trace"
        )

        log = [
            tests.common.trace(
                list(instance.over_embedded_data_specifications_or_empty())
            )
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_embedded_data_specifications_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_multi_language_property()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "MultiLanguageProperty"
            / "on_minimal.json"
            / "over_embedded_data_specifications_or_empty.trace"
        )

        log = [
            tests.common.trace(
                list(instance.over_embedded_data_specifications_or_empty())
            )
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_value_or_empty_on_complete_instance_against_recorded(self) -> None:
        instance = tests.common_jsonization.load_complete_multi_language_property()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "MultiLanguageProperty"
            / "on_complete.json"
            / "over_value_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_value_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_value_or_empty_on_minimal_instance_against_recorded(self) -> None:
        instance = tests.common_jsonization.load_minimal_multi_language_property()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "MultiLanguageProperty"
            / "on_minimal.json"
            / "over_value_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_value_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)


class Test_Range(unittest.TestCase):
    """
    Test ``over_X_or_default`` on instances of
    :py:class:`aas_core3_rc02.types.Range`.
    """

    def test_over_extensions_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_range()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Range"
            / "on_complete.json"
            / "over_extensions_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_extensions_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_extensions_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_range()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Range"
            / "on_minimal.json"
            / "over_extensions_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_extensions_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_display_name_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_range()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Range"
            / "on_complete.json"
            / "over_display_name_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_display_name_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_display_name_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_range()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Range"
            / "on_minimal.json"
            / "over_display_name_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_display_name_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_description_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_range()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Range"
            / "on_complete.json"
            / "over_description_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_description_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_description_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_range()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Range"
            / "on_minimal.json"
            / "over_description_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_description_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_supplemental_semantic_ids_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_range()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Range"
            / "on_complete.json"
            / "over_supplemental_semantic_ids_or_empty.trace"
        )

        log = [
            tests.common.trace(list(instance.over_supplemental_semantic_ids_or_empty()))
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_supplemental_semantic_ids_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_range()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Range"
            / "on_minimal.json"
            / "over_supplemental_semantic_ids_or_empty.trace"
        )

        log = [
            tests.common.trace(list(instance.over_supplemental_semantic_ids_or_empty()))
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_qualifiers_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_range()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Range"
            / "on_complete.json"
            / "over_qualifiers_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_qualifiers_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_qualifiers_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_range()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Range"
            / "on_minimal.json"
            / "over_qualifiers_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_qualifiers_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_embedded_data_specifications_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_range()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Range"
            / "on_complete.json"
            / "over_embedded_data_specifications_or_empty.trace"
        )

        log = [
            tests.common.trace(
                list(instance.over_embedded_data_specifications_or_empty())
            )
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_embedded_data_specifications_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_range()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Range"
            / "on_minimal.json"
            / "over_embedded_data_specifications_or_empty.trace"
        )

        log = [
            tests.common.trace(
                list(instance.over_embedded_data_specifications_or_empty())
            )
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)


class Test_ReferenceElement(unittest.TestCase):
    """
    Test ``over_X_or_default`` on instances of
    :py:class:`aas_core3_rc02.types.ReferenceElement`.
    """

    def test_over_extensions_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_reference_element()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "ReferenceElement"
            / "on_complete.json"
            / "over_extensions_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_extensions_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_extensions_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_reference_element()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "ReferenceElement"
            / "on_minimal.json"
            / "over_extensions_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_extensions_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_display_name_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_reference_element()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "ReferenceElement"
            / "on_complete.json"
            / "over_display_name_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_display_name_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_display_name_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_reference_element()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "ReferenceElement"
            / "on_minimal.json"
            / "over_display_name_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_display_name_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_description_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_reference_element()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "ReferenceElement"
            / "on_complete.json"
            / "over_description_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_description_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_description_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_reference_element()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "ReferenceElement"
            / "on_minimal.json"
            / "over_description_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_description_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_supplemental_semantic_ids_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_reference_element()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "ReferenceElement"
            / "on_complete.json"
            / "over_supplemental_semantic_ids_or_empty.trace"
        )

        log = [
            tests.common.trace(list(instance.over_supplemental_semantic_ids_or_empty()))
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_supplemental_semantic_ids_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_reference_element()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "ReferenceElement"
            / "on_minimal.json"
            / "over_supplemental_semantic_ids_or_empty.trace"
        )

        log = [
            tests.common.trace(list(instance.over_supplemental_semantic_ids_or_empty()))
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_qualifiers_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_reference_element()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "ReferenceElement"
            / "on_complete.json"
            / "over_qualifiers_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_qualifiers_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_qualifiers_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_reference_element()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "ReferenceElement"
            / "on_minimal.json"
            / "over_qualifiers_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_qualifiers_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_embedded_data_specifications_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_reference_element()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "ReferenceElement"
            / "on_complete.json"
            / "over_embedded_data_specifications_or_empty.trace"
        )

        log = [
            tests.common.trace(
                list(instance.over_embedded_data_specifications_or_empty())
            )
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_embedded_data_specifications_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_reference_element()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "ReferenceElement"
            / "on_minimal.json"
            / "over_embedded_data_specifications_or_empty.trace"
        )

        log = [
            tests.common.trace(
                list(instance.over_embedded_data_specifications_or_empty())
            )
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)


class Test_Blob(unittest.TestCase):
    """
    Test ``over_X_or_default`` on instances of
    :py:class:`aas_core3_rc02.types.Blob`.
    """

    def test_over_extensions_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_blob()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Blob"
            / "on_complete.json"
            / "over_extensions_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_extensions_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_extensions_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_blob()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Blob"
            / "on_minimal.json"
            / "over_extensions_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_extensions_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_display_name_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_blob()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Blob"
            / "on_complete.json"
            / "over_display_name_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_display_name_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_display_name_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_blob()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Blob"
            / "on_minimal.json"
            / "over_display_name_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_display_name_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_description_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_blob()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Blob"
            / "on_complete.json"
            / "over_description_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_description_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_description_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_blob()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Blob"
            / "on_minimal.json"
            / "over_description_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_description_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_supplemental_semantic_ids_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_blob()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Blob"
            / "on_complete.json"
            / "over_supplemental_semantic_ids_or_empty.trace"
        )

        log = [
            tests.common.trace(list(instance.over_supplemental_semantic_ids_or_empty()))
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_supplemental_semantic_ids_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_blob()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Blob"
            / "on_minimal.json"
            / "over_supplemental_semantic_ids_or_empty.trace"
        )

        log = [
            tests.common.trace(list(instance.over_supplemental_semantic_ids_or_empty()))
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_qualifiers_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_blob()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Blob"
            / "on_complete.json"
            / "over_qualifiers_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_qualifiers_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_qualifiers_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_blob()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Blob"
            / "on_minimal.json"
            / "over_qualifiers_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_qualifiers_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_embedded_data_specifications_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_blob()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Blob"
            / "on_complete.json"
            / "over_embedded_data_specifications_or_empty.trace"
        )

        log = [
            tests.common.trace(
                list(instance.over_embedded_data_specifications_or_empty())
            )
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_embedded_data_specifications_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_blob()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Blob"
            / "on_minimal.json"
            / "over_embedded_data_specifications_or_empty.trace"
        )

        log = [
            tests.common.trace(
                list(instance.over_embedded_data_specifications_or_empty())
            )
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)


class Test_File(unittest.TestCase):
    """
    Test ``over_X_or_default`` on instances of
    :py:class:`aas_core3_rc02.types.File`.
    """

    def test_over_extensions_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_file()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "File"
            / "on_complete.json"
            / "over_extensions_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_extensions_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_extensions_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_file()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "File"
            / "on_minimal.json"
            / "over_extensions_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_extensions_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_display_name_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_file()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "File"
            / "on_complete.json"
            / "over_display_name_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_display_name_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_display_name_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_file()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "File"
            / "on_minimal.json"
            / "over_display_name_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_display_name_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_description_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_file()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "File"
            / "on_complete.json"
            / "over_description_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_description_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_description_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_file()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "File"
            / "on_minimal.json"
            / "over_description_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_description_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_supplemental_semantic_ids_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_file()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "File"
            / "on_complete.json"
            / "over_supplemental_semantic_ids_or_empty.trace"
        )

        log = [
            tests.common.trace(list(instance.over_supplemental_semantic_ids_or_empty()))
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_supplemental_semantic_ids_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_file()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "File"
            / "on_minimal.json"
            / "over_supplemental_semantic_ids_or_empty.trace"
        )

        log = [
            tests.common.trace(list(instance.over_supplemental_semantic_ids_or_empty()))
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_qualifiers_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_file()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "File"
            / "on_complete.json"
            / "over_qualifiers_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_qualifiers_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_qualifiers_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_file()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "File"
            / "on_minimal.json"
            / "over_qualifiers_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_qualifiers_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_embedded_data_specifications_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_file()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "File"
            / "on_complete.json"
            / "over_embedded_data_specifications_or_empty.trace"
        )

        log = [
            tests.common.trace(
                list(instance.over_embedded_data_specifications_or_empty())
            )
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_embedded_data_specifications_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_file()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "File"
            / "on_minimal.json"
            / "over_embedded_data_specifications_or_empty.trace"
        )

        log = [
            tests.common.trace(
                list(instance.over_embedded_data_specifications_or_empty())
            )
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)


class Test_AnnotatedRelationshipElement(unittest.TestCase):
    """
    Test ``over_X_or_default`` on instances of
    :py:class:`aas_core3_rc02.types.AnnotatedRelationshipElement`.
    """

    def test_over_extensions_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = (
            tests.common_jsonization.load_complete_annotated_relationship_element()
        )
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "AnnotatedRelationshipElement"
            / "on_complete.json"
            / "over_extensions_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_extensions_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_extensions_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = (
            tests.common_jsonization.load_minimal_annotated_relationship_element()
        )
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "AnnotatedRelationshipElement"
            / "on_minimal.json"
            / "over_extensions_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_extensions_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_display_name_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = (
            tests.common_jsonization.load_complete_annotated_relationship_element()
        )
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "AnnotatedRelationshipElement"
            / "on_complete.json"
            / "over_display_name_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_display_name_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_display_name_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = (
            tests.common_jsonization.load_minimal_annotated_relationship_element()
        )
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "AnnotatedRelationshipElement"
            / "on_minimal.json"
            / "over_display_name_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_display_name_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_description_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = (
            tests.common_jsonization.load_complete_annotated_relationship_element()
        )
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "AnnotatedRelationshipElement"
            / "on_complete.json"
            / "over_description_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_description_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_description_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = (
            tests.common_jsonization.load_minimal_annotated_relationship_element()
        )
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "AnnotatedRelationshipElement"
            / "on_minimal.json"
            / "over_description_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_description_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_supplemental_semantic_ids_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = (
            tests.common_jsonization.load_complete_annotated_relationship_element()
        )
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "AnnotatedRelationshipElement"
            / "on_complete.json"
            / "over_supplemental_semantic_ids_or_empty.trace"
        )

        log = [
            tests.common.trace(list(instance.over_supplemental_semantic_ids_or_empty()))
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_supplemental_semantic_ids_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = (
            tests.common_jsonization.load_minimal_annotated_relationship_element()
        )
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "AnnotatedRelationshipElement"
            / "on_minimal.json"
            / "over_supplemental_semantic_ids_or_empty.trace"
        )

        log = [
            tests.common.trace(list(instance.over_supplemental_semantic_ids_or_empty()))
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_qualifiers_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = (
            tests.common_jsonization.load_complete_annotated_relationship_element()
        )
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "AnnotatedRelationshipElement"
            / "on_complete.json"
            / "over_qualifiers_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_qualifiers_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_qualifiers_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = (
            tests.common_jsonization.load_minimal_annotated_relationship_element()
        )
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "AnnotatedRelationshipElement"
            / "on_minimal.json"
            / "over_qualifiers_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_qualifiers_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_embedded_data_specifications_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = (
            tests.common_jsonization.load_complete_annotated_relationship_element()
        )
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "AnnotatedRelationshipElement"
            / "on_complete.json"
            / "over_embedded_data_specifications_or_empty.trace"
        )

        log = [
            tests.common.trace(
                list(instance.over_embedded_data_specifications_or_empty())
            )
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_embedded_data_specifications_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = (
            tests.common_jsonization.load_minimal_annotated_relationship_element()
        )
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "AnnotatedRelationshipElement"
            / "on_minimal.json"
            / "over_embedded_data_specifications_or_empty.trace"
        )

        log = [
            tests.common.trace(
                list(instance.over_embedded_data_specifications_or_empty())
            )
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_annotations_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = (
            tests.common_jsonization.load_complete_annotated_relationship_element()
        )
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "AnnotatedRelationshipElement"
            / "on_complete.json"
            / "over_annotations_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_annotations_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_annotations_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = (
            tests.common_jsonization.load_minimal_annotated_relationship_element()
        )
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "AnnotatedRelationshipElement"
            / "on_minimal.json"
            / "over_annotations_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_annotations_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)


class Test_Entity(unittest.TestCase):
    """
    Test ``over_X_or_default`` on instances of
    :py:class:`aas_core3_rc02.types.Entity`.
    """

    def test_over_extensions_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_entity()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Entity"
            / "on_complete.json"
            / "over_extensions_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_extensions_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_extensions_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_entity()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Entity"
            / "on_minimal.json"
            / "over_extensions_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_extensions_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_display_name_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_entity()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Entity"
            / "on_complete.json"
            / "over_display_name_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_display_name_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_display_name_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_entity()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Entity"
            / "on_minimal.json"
            / "over_display_name_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_display_name_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_description_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_entity()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Entity"
            / "on_complete.json"
            / "over_description_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_description_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_description_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_entity()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Entity"
            / "on_minimal.json"
            / "over_description_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_description_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_supplemental_semantic_ids_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_entity()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Entity"
            / "on_complete.json"
            / "over_supplemental_semantic_ids_or_empty.trace"
        )

        log = [
            tests.common.trace(list(instance.over_supplemental_semantic_ids_or_empty()))
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_supplemental_semantic_ids_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_entity()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Entity"
            / "on_minimal.json"
            / "over_supplemental_semantic_ids_or_empty.trace"
        )

        log = [
            tests.common.trace(list(instance.over_supplemental_semantic_ids_or_empty()))
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_qualifiers_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_entity()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Entity"
            / "on_complete.json"
            / "over_qualifiers_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_qualifiers_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_qualifiers_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_entity()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Entity"
            / "on_minimal.json"
            / "over_qualifiers_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_qualifiers_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_embedded_data_specifications_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_entity()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Entity"
            / "on_complete.json"
            / "over_embedded_data_specifications_or_empty.trace"
        )

        log = [
            tests.common.trace(
                list(instance.over_embedded_data_specifications_or_empty())
            )
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_embedded_data_specifications_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_entity()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Entity"
            / "on_minimal.json"
            / "over_embedded_data_specifications_or_empty.trace"
        )

        log = [
            tests.common.trace(
                list(instance.over_embedded_data_specifications_or_empty())
            )
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_statements_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_entity()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Entity"
            / "on_complete.json"
            / "over_statements_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_statements_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_statements_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_entity()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Entity"
            / "on_minimal.json"
            / "over_statements_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_statements_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)


class Test_BasicEventElement(unittest.TestCase):
    """
    Test ``over_X_or_default`` on instances of
    :py:class:`aas_core3_rc02.types.BasicEventElement`.
    """

    def test_over_extensions_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_basic_event_element()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "BasicEventElement"
            / "on_complete.json"
            / "over_extensions_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_extensions_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_extensions_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_basic_event_element()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "BasicEventElement"
            / "on_minimal.json"
            / "over_extensions_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_extensions_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_display_name_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_basic_event_element()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "BasicEventElement"
            / "on_complete.json"
            / "over_display_name_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_display_name_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_display_name_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_basic_event_element()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "BasicEventElement"
            / "on_minimal.json"
            / "over_display_name_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_display_name_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_description_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_basic_event_element()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "BasicEventElement"
            / "on_complete.json"
            / "over_description_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_description_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_description_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_basic_event_element()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "BasicEventElement"
            / "on_minimal.json"
            / "over_description_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_description_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_supplemental_semantic_ids_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_basic_event_element()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "BasicEventElement"
            / "on_complete.json"
            / "over_supplemental_semantic_ids_or_empty.trace"
        )

        log = [
            tests.common.trace(list(instance.over_supplemental_semantic_ids_or_empty()))
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_supplemental_semantic_ids_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_basic_event_element()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "BasicEventElement"
            / "on_minimal.json"
            / "over_supplemental_semantic_ids_or_empty.trace"
        )

        log = [
            tests.common.trace(list(instance.over_supplemental_semantic_ids_or_empty()))
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_qualifiers_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_basic_event_element()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "BasicEventElement"
            / "on_complete.json"
            / "over_qualifiers_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_qualifiers_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_qualifiers_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_basic_event_element()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "BasicEventElement"
            / "on_minimal.json"
            / "over_qualifiers_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_qualifiers_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_embedded_data_specifications_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_basic_event_element()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "BasicEventElement"
            / "on_complete.json"
            / "over_embedded_data_specifications_or_empty.trace"
        )

        log = [
            tests.common.trace(
                list(instance.over_embedded_data_specifications_or_empty())
            )
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_embedded_data_specifications_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_basic_event_element()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "BasicEventElement"
            / "on_minimal.json"
            / "over_embedded_data_specifications_or_empty.trace"
        )

        log = [
            tests.common.trace(
                list(instance.over_embedded_data_specifications_or_empty())
            )
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)


class Test_Operation(unittest.TestCase):
    """
    Test ``over_X_or_default`` on instances of
    :py:class:`aas_core3_rc02.types.Operation`.
    """

    def test_over_extensions_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_operation()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Operation"
            / "on_complete.json"
            / "over_extensions_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_extensions_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_extensions_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_operation()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Operation"
            / "on_minimal.json"
            / "over_extensions_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_extensions_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_display_name_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_operation()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Operation"
            / "on_complete.json"
            / "over_display_name_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_display_name_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_display_name_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_operation()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Operation"
            / "on_minimal.json"
            / "over_display_name_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_display_name_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_description_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_operation()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Operation"
            / "on_complete.json"
            / "over_description_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_description_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_description_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_operation()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Operation"
            / "on_minimal.json"
            / "over_description_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_description_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_supplemental_semantic_ids_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_operation()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Operation"
            / "on_complete.json"
            / "over_supplemental_semantic_ids_or_empty.trace"
        )

        log = [
            tests.common.trace(list(instance.over_supplemental_semantic_ids_or_empty()))
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_supplemental_semantic_ids_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_operation()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Operation"
            / "on_minimal.json"
            / "over_supplemental_semantic_ids_or_empty.trace"
        )

        log = [
            tests.common.trace(list(instance.over_supplemental_semantic_ids_or_empty()))
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_qualifiers_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_operation()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Operation"
            / "on_complete.json"
            / "over_qualifiers_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_qualifiers_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_qualifiers_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_operation()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Operation"
            / "on_minimal.json"
            / "over_qualifiers_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_qualifiers_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_embedded_data_specifications_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_operation()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Operation"
            / "on_complete.json"
            / "over_embedded_data_specifications_or_empty.trace"
        )

        log = [
            tests.common.trace(
                list(instance.over_embedded_data_specifications_or_empty())
            )
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_embedded_data_specifications_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_operation()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Operation"
            / "on_minimal.json"
            / "over_embedded_data_specifications_or_empty.trace"
        )

        log = [
            tests.common.trace(
                list(instance.over_embedded_data_specifications_or_empty())
            )
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_input_variables_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_operation()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Operation"
            / "on_complete.json"
            / "over_input_variables_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_input_variables_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_input_variables_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_operation()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Operation"
            / "on_minimal.json"
            / "over_input_variables_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_input_variables_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_output_variables_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_operation()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Operation"
            / "on_complete.json"
            / "over_output_variables_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_output_variables_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_output_variables_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_operation()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Operation"
            / "on_minimal.json"
            / "over_output_variables_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_output_variables_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_inoutput_variables_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_operation()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Operation"
            / "on_complete.json"
            / "over_inoutput_variables_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_inoutput_variables_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_inoutput_variables_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_operation()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Operation"
            / "on_minimal.json"
            / "over_inoutput_variables_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_inoutput_variables_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)


class Test_Capability(unittest.TestCase):
    """
    Test ``over_X_or_default`` on instances of
    :py:class:`aas_core3_rc02.types.Capability`.
    """

    def test_over_extensions_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_capability()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Capability"
            / "on_complete.json"
            / "over_extensions_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_extensions_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_extensions_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_capability()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Capability"
            / "on_minimal.json"
            / "over_extensions_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_extensions_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_display_name_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_capability()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Capability"
            / "on_complete.json"
            / "over_display_name_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_display_name_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_display_name_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_capability()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Capability"
            / "on_minimal.json"
            / "over_display_name_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_display_name_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_description_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_capability()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Capability"
            / "on_complete.json"
            / "over_description_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_description_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_description_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_capability()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Capability"
            / "on_minimal.json"
            / "over_description_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_description_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_supplemental_semantic_ids_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_capability()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Capability"
            / "on_complete.json"
            / "over_supplemental_semantic_ids_or_empty.trace"
        )

        log = [
            tests.common.trace(list(instance.over_supplemental_semantic_ids_or_empty()))
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_supplemental_semantic_ids_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_capability()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Capability"
            / "on_minimal.json"
            / "over_supplemental_semantic_ids_or_empty.trace"
        )

        log = [
            tests.common.trace(list(instance.over_supplemental_semantic_ids_or_empty()))
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_qualifiers_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_capability()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Capability"
            / "on_complete.json"
            / "over_qualifiers_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_qualifiers_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_qualifiers_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_capability()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Capability"
            / "on_minimal.json"
            / "over_qualifiers_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_qualifiers_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_embedded_data_specifications_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_capability()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Capability"
            / "on_complete.json"
            / "over_embedded_data_specifications_or_empty.trace"
        )

        log = [
            tests.common.trace(
                list(instance.over_embedded_data_specifications_or_empty())
            )
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_embedded_data_specifications_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_capability()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Capability"
            / "on_minimal.json"
            / "over_embedded_data_specifications_or_empty.trace"
        )

        log = [
            tests.common.trace(
                list(instance.over_embedded_data_specifications_or_empty())
            )
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)


class Test_ConceptDescription(unittest.TestCase):
    """
    Test ``over_X_or_default`` on instances of
    :py:class:`aas_core3_rc02.types.ConceptDescription`.
    """

    def test_over_extensions_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_concept_description()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "ConceptDescription"
            / "on_complete.json"
            / "over_extensions_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_extensions_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_extensions_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_concept_description()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "ConceptDescription"
            / "on_minimal.json"
            / "over_extensions_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_extensions_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_display_name_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_concept_description()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "ConceptDescription"
            / "on_complete.json"
            / "over_display_name_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_display_name_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_display_name_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_concept_description()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "ConceptDescription"
            / "on_minimal.json"
            / "over_display_name_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_display_name_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_description_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_concept_description()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "ConceptDescription"
            / "on_complete.json"
            / "over_description_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_description_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_description_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_concept_description()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "ConceptDescription"
            / "on_minimal.json"
            / "over_description_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_description_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_embedded_data_specifications_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_concept_description()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "ConceptDescription"
            / "on_complete.json"
            / "over_embedded_data_specifications_or_empty.trace"
        )

        log = [
            tests.common.trace(
                list(instance.over_embedded_data_specifications_or_empty())
            )
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_embedded_data_specifications_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_concept_description()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "ConceptDescription"
            / "on_minimal.json"
            / "over_embedded_data_specifications_or_empty.trace"
        )

        log = [
            tests.common.trace(
                list(instance.over_embedded_data_specifications_or_empty())
            )
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_is_case_of_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_concept_description()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "ConceptDescription"
            / "on_complete.json"
            / "over_is_case_of_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_is_case_of_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_is_case_of_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_concept_description()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "ConceptDescription"
            / "on_minimal.json"
            / "over_is_case_of_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_is_case_of_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)


class Test_Environment(unittest.TestCase):
    """
    Test ``over_X_or_default`` on instances of
    :py:class:`aas_core3_rc02.types.Environment`.
    """

    def test_over_asset_administration_shells_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_environment()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Environment"
            / "on_complete.json"
            / "over_asset_administration_shells_or_empty.trace"
        )

        log = [
            tests.common.trace(
                list(instance.over_asset_administration_shells_or_empty())
            )
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_asset_administration_shells_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_environment()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Environment"
            / "on_minimal.json"
            / "over_asset_administration_shells_or_empty.trace"
        )

        log = [
            tests.common.trace(
                list(instance.over_asset_administration_shells_or_empty())
            )
        ]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_submodels_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_environment()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Environment"
            / "on_complete.json"
            / "over_submodels_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_submodels_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_submodels_or_empty_on_minimal_instance_against_recorded(self) -> None:
        instance = tests.common_jsonization.load_minimal_environment()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Environment"
            / "on_minimal.json"
            / "over_submodels_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_submodels_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_concept_descriptions_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_environment()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Environment"
            / "on_complete.json"
            / "over_concept_descriptions_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_concept_descriptions_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_concept_descriptions_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_environment()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "Environment"
            / "on_minimal.json"
            / "over_concept_descriptions_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_concept_descriptions_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)


class Test_DataSpecificationIEC61360(unittest.TestCase):
    """
    Test ``over_X_or_default`` on instances of
    :py:class:`aas_core3_rc02.types.DataSpecificationIEC61360`.
    """

    def test_over_short_name_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_data_specification_iec_61360()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "DataSpecificationIEC61360"
            / "on_complete.json"
            / "over_short_name_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_short_name_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_short_name_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_data_specification_iec_61360()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "DataSpecificationIEC61360"
            / "on_minimal.json"
            / "over_short_name_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_short_name_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_definition_or_empty_on_complete_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_complete_data_specification_iec_61360()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "DataSpecificationIEC61360"
            / "on_complete.json"
            / "over_definition_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_definition_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)

    def test_over_definition_or_empty_on_minimal_instance_against_recorded(
        self,
    ) -> None:
        instance = tests.common_jsonization.load_minimal_data_specification_iec_61360()
        expected_path = (
            tests.common.TEST_DATA_DIR
            / "test_over_X_or_empty"
            / "DataSpecificationIEC61360"
            / "on_minimal.json"
            / "over_definition_or_empty.trace"
        )

        log = [tests.common.trace(list(instance.over_definition_or_empty()))]
        got_text = tests.common.trace_log_as_text_file_content(log)
        tests.common.record_or_check(expected_path, got_text)


if __name__ == "__main__":
    unittest.main()


# This code has been automatically generated by:
# dev_scripts/generate_test_for_over_X_or_empty.py
# Do NOT edit or append.
