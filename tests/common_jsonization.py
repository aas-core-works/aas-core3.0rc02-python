# This code has been automatically generated by:
# dev_scripts/generate_common_jsonization.py
# Do NOT edit or append.


"""Provide common functionality for JSON de-serialization."""


# pylint: disable=missing-docstring


import collections.abc
import json
import sys
from typing import Iterator, Optional

if sys.version_info >= (3, 8):
    from typing import Final
else:
    from typing_extensions import Final

import aas_core3_rc02.common as aas_common
import aas_core3_rc02.jsonization as aas_jsonization
import aas_core3_rc02.types as aas_types

import tests.common


class Difference:
    """Represent a single difference between two JSON-ables."""

    #: Human-readable description of the difference
    message: Final[str]

    #: Path in the expected JSON-able value which is different from
    #: the obtained JSON-able value
    path: Final[aas_jsonization.Path]

    def __init__(self, message: str) -> None:
        """Initialize with the given message and empty path."""
        self.message = message
        self.path = aas_jsonization.Path()

    def __str__(self) -> str:
        return f"#{self.path}: {self.message}"


def check_equal(
    expected: aas_jsonization.Jsonable,
    got: aas_jsonization.Jsonable,
) -> Iterator[Difference]:
    """
    Compare recursively two JSON-able values for equality.

    :param expected: expected JSON-able value
    :param got: obtained JSON-able value
    :yield: differences
    """
    if isinstance(expected, (bool, int, float, str, bytes)):
        if type(expected) != type(got):  # pylint: disable=unidiomatic-typecheck
            yield Difference(f"Expected {type(expected)}, but got {type(got)}")

        if expected != got:
            yield Difference(f"Expected {expected!r}, but got {got!r}")
    elif isinstance(expected, collections.abc.Sequence):
        if not isinstance(got, collections.abc.Sequence):
            yield Difference(f"Expected a sequence, but got {type(got)}")
        else:
            if len(expected) != len(got):
                yield Difference(
                    f"Expected a sequence of {len(expected)} item(s), "
                    f"but got {len(got)} item(s)"
                )

            for i, (expected_item, got_item) in enumerate(zip(expected, got)):
                for difference in check_equal(expected_item, got_item):
                    difference.path._prepend(aas_jsonization.IndexSegment(expected, i))
                    yield difference

    elif isinstance(expected, collections.abc.Mapping):
        if not isinstance(got, collections.abc.Mapping):
            yield Difference(f"Expected a mapping, but got {type(got)}")
        else:
            if not all(isinstance(key, str) for key in expected.keys()):
                raise ValueError(
                    f"Expected all keys in the expected JSON-able value to be strings, "
                    f"but got: {list(expected.keys())}"
                )

            if not all(isinstance(key, str) for key in got.keys()):
                yield Difference(
                    f"Expected all keys in a mapping to be strings, "
                    f"but got: {list(got.keys())}"
                )

            expected_key_set = set(expected.keys())
            got_key_set = set(got.keys())

            expected_got_diff = expected_key_set.difference(got_key_set)
            if expected_got_diff:
                yield Difference(f"Expected key(s) {sorted(expected_got_diff)} missing")

            got_expected_diff = got_key_set.difference(expected_key_set)
            if got_expected_diff:
                yield Difference(f"Unexpected key(s) {sorted(got_expected_diff)}")

            for key, expected_value in expected.items():
                got_value = got[key]

                for difference in check_equal(expected_value, got_value):
                    difference.path._prepend(
                        aas_jsonization.PropertySegment(expected, key)
                    )
                    yield difference
    else:
        aas_common.assert_never(expected)


def load_complete_extension() -> aas_types.Extension:
    """
    Load a complete example
    of :py:class:`aas_types.Extension`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "Extension"
        / "complete.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.Extension] = None

    for something in container.descend():
        if isinstance(something, aas_types.Extension):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of Extension " f"in {path}, but found none."
        )

    return instance


def load_minimal_extension() -> aas_types.Extension:
    """
    Load a minimal example
    of :py:class:`aas_types.Extension`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "Extension"
        / "minimal.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.Extension] = None

    for something in container.descend():
        if isinstance(something, aas_types.Extension):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of Extension " f"in {path}, but found none."
        )

    return instance


def load_complete_administrative_information() -> aas_types.AdministrativeInformation:
    """
    Load a complete example
    of :py:class:`aas_types.AdministrativeInformation`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "AdministrativeInformation"
        / "complete.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.AdministrativeInformation] = None

    for something in container.descend():
        if isinstance(something, aas_types.AdministrativeInformation):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of AdministrativeInformation "
            f"in {path}, but found none."
        )

    return instance


def load_minimal_administrative_information() -> aas_types.AdministrativeInformation:
    """
    Load a minimal example
    of :py:class:`aas_types.AdministrativeInformation`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "AdministrativeInformation"
        / "minimal.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.AdministrativeInformation] = None

    for something in container.descend():
        if isinstance(something, aas_types.AdministrativeInformation):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of AdministrativeInformation "
            f"in {path}, but found none."
        )

    return instance


def load_complete_qualifier() -> aas_types.Qualifier:
    """
    Load a complete example
    of :py:class:`aas_types.Qualifier`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "Qualifier"
        / "complete.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.Qualifier] = None

    for something in container.descend():
        if isinstance(something, aas_types.Qualifier):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of Qualifier " f"in {path}, but found none."
        )

    return instance


def load_minimal_qualifier() -> aas_types.Qualifier:
    """
    Load a minimal example
    of :py:class:`aas_types.Qualifier`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "Qualifier"
        / "minimal.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.Qualifier] = None

    for something in container.descend():
        if isinstance(something, aas_types.Qualifier):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of Qualifier " f"in {path}, but found none."
        )

    return instance


def load_complete_asset_administration_shell() -> aas_types.AssetAdministrationShell:
    """
    Load a complete example
    of :py:class:`aas_types.AssetAdministrationShell`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "AssetAdministrationShell"
        / "complete.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.AssetAdministrationShell] = None

    for something in container.descend():
        if isinstance(something, aas_types.AssetAdministrationShell):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of AssetAdministrationShell "
            f"in {path}, but found none."
        )

    return instance


def load_minimal_asset_administration_shell() -> aas_types.AssetAdministrationShell:
    """
    Load a minimal example
    of :py:class:`aas_types.AssetAdministrationShell`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "AssetAdministrationShell"
        / "minimal.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.AssetAdministrationShell] = None

    for something in container.descend():
        if isinstance(something, aas_types.AssetAdministrationShell):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of AssetAdministrationShell "
            f"in {path}, but found none."
        )

    return instance


def load_complete_asset_information() -> aas_types.AssetInformation:
    """
    Load a complete example
    of :py:class:`aas_types.AssetInformation`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "AssetInformation"
        / "complete.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.AssetInformation] = None

    for something in container.descend():
        if isinstance(something, aas_types.AssetInformation):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of AssetInformation "
            f"in {path}, but found none."
        )

    return instance


def load_minimal_asset_information() -> aas_types.AssetInformation:
    """
    Load a minimal example
    of :py:class:`aas_types.AssetInformation`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "AssetInformation"
        / "minimal.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.AssetInformation] = None

    for something in container.descend():
        if isinstance(something, aas_types.AssetInformation):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of AssetInformation "
            f"in {path}, but found none."
        )

    return instance


def load_complete_resource() -> aas_types.Resource:
    """
    Load a complete example
    of :py:class:`aas_types.Resource`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "Resource"
        / "complete.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.Resource] = None

    for something in container.descend():
        if isinstance(something, aas_types.Resource):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of Resource " f"in {path}, but found none."
        )

    return instance


def load_minimal_resource() -> aas_types.Resource:
    """
    Load a minimal example
    of :py:class:`aas_types.Resource`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "Resource"
        / "minimal.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.Resource] = None

    for something in container.descend():
        if isinstance(something, aas_types.Resource):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of Resource " f"in {path}, but found none."
        )

    return instance


def load_complete_specific_asset_id() -> aas_types.SpecificAssetId:
    """
    Load a complete example
    of :py:class:`aas_types.SpecificAssetId`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "SpecificAssetId"
        / "complete.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.SpecificAssetId] = None

    for something in container.descend():
        if isinstance(something, aas_types.SpecificAssetId):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of SpecificAssetId "
            f"in {path}, but found none."
        )

    return instance


def load_minimal_specific_asset_id() -> aas_types.SpecificAssetId:
    """
    Load a minimal example
    of :py:class:`aas_types.SpecificAssetId`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "SpecificAssetId"
        / "minimal.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.SpecificAssetId] = None

    for something in container.descend():
        if isinstance(something, aas_types.SpecificAssetId):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of SpecificAssetId "
            f"in {path}, but found none."
        )

    return instance


def load_complete_submodel() -> aas_types.Submodel:
    """
    Load a complete example
    of :py:class:`aas_types.Submodel`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "Submodel"
        / "complete.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.Submodel] = None

    for something in container.descend():
        if isinstance(something, aas_types.Submodel):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of Submodel " f"in {path}, but found none."
        )

    return instance


def load_minimal_submodel() -> aas_types.Submodel:
    """
    Load a minimal example
    of :py:class:`aas_types.Submodel`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "Submodel"
        / "minimal.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.Submodel] = None

    for something in container.descend():
        if isinstance(something, aas_types.Submodel):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of Submodel " f"in {path}, but found none."
        )

    return instance


def load_complete_relationship_element() -> aas_types.RelationshipElement:
    """
    Load a complete example
    of :py:class:`aas_types.RelationshipElement`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "RelationshipElement"
        / "complete.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.RelationshipElement] = None

    for something in container.descend():
        if isinstance(something, aas_types.RelationshipElement):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of RelationshipElement "
            f"in {path}, but found none."
        )

    return instance


def load_minimal_relationship_element() -> aas_types.RelationshipElement:
    """
    Load a minimal example
    of :py:class:`aas_types.RelationshipElement`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "RelationshipElement"
        / "minimal.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.RelationshipElement] = None

    for something in container.descend():
        if isinstance(something, aas_types.RelationshipElement):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of RelationshipElement "
            f"in {path}, but found none."
        )

    return instance


def load_complete_submodel_element_list() -> aas_types.SubmodelElementList:
    """
    Load a complete example
    of :py:class:`aas_types.SubmodelElementList`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "SubmodelElementList"
        / "complete.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.SubmodelElementList] = None

    for something in container.descend():
        if isinstance(something, aas_types.SubmodelElementList):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of SubmodelElementList "
            f"in {path}, but found none."
        )

    return instance


def load_minimal_submodel_element_list() -> aas_types.SubmodelElementList:
    """
    Load a minimal example
    of :py:class:`aas_types.SubmodelElementList`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "SubmodelElementList"
        / "minimal.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.SubmodelElementList] = None

    for something in container.descend():
        if isinstance(something, aas_types.SubmodelElementList):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of SubmodelElementList "
            f"in {path}, but found none."
        )

    return instance


def load_complete_submodel_element_collection() -> aas_types.SubmodelElementCollection:
    """
    Load a complete example
    of :py:class:`aas_types.SubmodelElementCollection`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "SubmodelElementCollection"
        / "complete.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.SubmodelElementCollection] = None

    for something in container.descend():
        if isinstance(something, aas_types.SubmodelElementCollection):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of SubmodelElementCollection "
            f"in {path}, but found none."
        )

    return instance


def load_minimal_submodel_element_collection() -> aas_types.SubmodelElementCollection:
    """
    Load a minimal example
    of :py:class:`aas_types.SubmodelElementCollection`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "SubmodelElementCollection"
        / "minimal.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.SubmodelElementCollection] = None

    for something in container.descend():
        if isinstance(something, aas_types.SubmodelElementCollection):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of SubmodelElementCollection "
            f"in {path}, but found none."
        )

    return instance


def load_complete_property() -> aas_types.Property:
    """
    Load a complete example
    of :py:class:`aas_types.Property`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "Property"
        / "complete.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.Property] = None

    for something in container.descend():
        if isinstance(something, aas_types.Property):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of Property " f"in {path}, but found none."
        )

    return instance


def load_minimal_property() -> aas_types.Property:
    """
    Load a minimal example
    of :py:class:`aas_types.Property`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "Property"
        / "minimal.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.Property] = None

    for something in container.descend():
        if isinstance(something, aas_types.Property):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of Property " f"in {path}, but found none."
        )

    return instance


def load_complete_multi_language_property() -> aas_types.MultiLanguageProperty:
    """
    Load a complete example
    of :py:class:`aas_types.MultiLanguageProperty`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "MultiLanguageProperty"
        / "complete.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.MultiLanguageProperty] = None

    for something in container.descend():
        if isinstance(something, aas_types.MultiLanguageProperty):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of MultiLanguageProperty "
            f"in {path}, but found none."
        )

    return instance


def load_minimal_multi_language_property() -> aas_types.MultiLanguageProperty:
    """
    Load a minimal example
    of :py:class:`aas_types.MultiLanguageProperty`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "MultiLanguageProperty"
        / "minimal.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.MultiLanguageProperty] = None

    for something in container.descend():
        if isinstance(something, aas_types.MultiLanguageProperty):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of MultiLanguageProperty "
            f"in {path}, but found none."
        )

    return instance


def load_complete_range() -> aas_types.Range:
    """
    Load a complete example
    of :py:class:`aas_types.Range`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "Range"
        / "complete.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.Range] = None

    for something in container.descend():
        if isinstance(something, aas_types.Range):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of Range " f"in {path}, but found none."
        )

    return instance


def load_minimal_range() -> aas_types.Range:
    """
    Load a minimal example
    of :py:class:`aas_types.Range`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "Range"
        / "minimal.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.Range] = None

    for something in container.descend():
        if isinstance(something, aas_types.Range):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of Range " f"in {path}, but found none."
        )

    return instance


def load_complete_reference_element() -> aas_types.ReferenceElement:
    """
    Load a complete example
    of :py:class:`aas_types.ReferenceElement`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "ReferenceElement"
        / "complete.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.ReferenceElement] = None

    for something in container.descend():
        if isinstance(something, aas_types.ReferenceElement):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of ReferenceElement "
            f"in {path}, but found none."
        )

    return instance


def load_minimal_reference_element() -> aas_types.ReferenceElement:
    """
    Load a minimal example
    of :py:class:`aas_types.ReferenceElement`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "ReferenceElement"
        / "minimal.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.ReferenceElement] = None

    for something in container.descend():
        if isinstance(something, aas_types.ReferenceElement):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of ReferenceElement "
            f"in {path}, but found none."
        )

    return instance


def load_complete_blob() -> aas_types.Blob:
    """
    Load a complete example
    of :py:class:`aas_types.Blob`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "Blob"
        / "complete.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.Blob] = None

    for something in container.descend():
        if isinstance(something, aas_types.Blob):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of Blob " f"in {path}, but found none."
        )

    return instance


def load_minimal_blob() -> aas_types.Blob:
    """
    Load a minimal example
    of :py:class:`aas_types.Blob`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "Blob"
        / "minimal.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.Blob] = None

    for something in container.descend():
        if isinstance(something, aas_types.Blob):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of Blob " f"in {path}, but found none."
        )

    return instance


def load_complete_file() -> aas_types.File:
    """
    Load a complete example
    of :py:class:`aas_types.File`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "File"
        / "complete.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.File] = None

    for something in container.descend():
        if isinstance(something, aas_types.File):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of File " f"in {path}, but found none."
        )

    return instance


def load_minimal_file() -> aas_types.File:
    """
    Load a minimal example
    of :py:class:`aas_types.File`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "File"
        / "minimal.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.File] = None

    for something in container.descend():
        if isinstance(something, aas_types.File):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of File " f"in {path}, but found none."
        )

    return instance


def load_complete_annotated_relationship_element() -> aas_types.AnnotatedRelationshipElement:
    """
    Load a complete example
    of :py:class:`aas_types.AnnotatedRelationshipElement`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "AnnotatedRelationshipElement"
        / "complete.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.AnnotatedRelationshipElement] = None

    for something in container.descend():
        if isinstance(something, aas_types.AnnotatedRelationshipElement):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of AnnotatedRelationshipElement "
            f"in {path}, but found none."
        )

    return instance


def load_minimal_annotated_relationship_element() -> aas_types.AnnotatedRelationshipElement:
    """
    Load a minimal example
    of :py:class:`aas_types.AnnotatedRelationshipElement`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "AnnotatedRelationshipElement"
        / "minimal.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.AnnotatedRelationshipElement] = None

    for something in container.descend():
        if isinstance(something, aas_types.AnnotatedRelationshipElement):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of AnnotatedRelationshipElement "
            f"in {path}, but found none."
        )

    return instance


def load_complete_entity() -> aas_types.Entity:
    """
    Load a complete example
    of :py:class:`aas_types.Entity`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "Entity"
        / "complete.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.Entity] = None

    for something in container.descend():
        if isinstance(something, aas_types.Entity):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of Entity " f"in {path}, but found none."
        )

    return instance


def load_minimal_entity() -> aas_types.Entity:
    """
    Load a minimal example
    of :py:class:`aas_types.Entity`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "Entity"
        / "minimal.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.Entity] = None

    for something in container.descend():
        if isinstance(something, aas_types.Entity):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of Entity " f"in {path}, but found none."
        )

    return instance


def load_complete_event_payload() -> aas_types.EventPayload:
    """
    Load a complete example
    of :py:class:`aas_types.EventPayload`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "SelfContained"
        / "Expected"
        / "EventPayload"
        / "complete.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    return aas_jsonization.event_payload_from_jsonable(jsonable)


def load_minimal_event_payload() -> aas_types.EventPayload:
    """
    Load a minimal example
    of :py:class:`aas_types.EventPayload`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "SelfContained"
        / "Expected"
        / "EventPayload"
        / "minimal.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    return aas_jsonization.event_payload_from_jsonable(jsonable)


def load_complete_basic_event_element() -> aas_types.BasicEventElement:
    """
    Load a complete example
    of :py:class:`aas_types.BasicEventElement`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "BasicEventElement"
        / "complete.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.BasicEventElement] = None

    for something in container.descend():
        if isinstance(something, aas_types.BasicEventElement):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of BasicEventElement "
            f"in {path}, but found none."
        )

    return instance


def load_minimal_basic_event_element() -> aas_types.BasicEventElement:
    """
    Load a minimal example
    of :py:class:`aas_types.BasicEventElement`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "BasicEventElement"
        / "minimal.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.BasicEventElement] = None

    for something in container.descend():
        if isinstance(something, aas_types.BasicEventElement):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of BasicEventElement "
            f"in {path}, but found none."
        )

    return instance


def load_complete_operation() -> aas_types.Operation:
    """
    Load a complete example
    of :py:class:`aas_types.Operation`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "Operation"
        / "complete.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.Operation] = None

    for something in container.descend():
        if isinstance(something, aas_types.Operation):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of Operation " f"in {path}, but found none."
        )

    return instance


def load_minimal_operation() -> aas_types.Operation:
    """
    Load a minimal example
    of :py:class:`aas_types.Operation`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "Operation"
        / "minimal.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.Operation] = None

    for something in container.descend():
        if isinstance(something, aas_types.Operation):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of Operation " f"in {path}, but found none."
        )

    return instance


def load_complete_operation_variable() -> aas_types.OperationVariable:
    """
    Load a complete example
    of :py:class:`aas_types.OperationVariable`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "OperationVariable"
        / "complete.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.OperationVariable] = None

    for something in container.descend():
        if isinstance(something, aas_types.OperationVariable):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of OperationVariable "
            f"in {path}, but found none."
        )

    return instance


def load_minimal_operation_variable() -> aas_types.OperationVariable:
    """
    Load a minimal example
    of :py:class:`aas_types.OperationVariable`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "OperationVariable"
        / "minimal.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.OperationVariable] = None

    for something in container.descend():
        if isinstance(something, aas_types.OperationVariable):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of OperationVariable "
            f"in {path}, but found none."
        )

    return instance


def load_complete_capability() -> aas_types.Capability:
    """
    Load a complete example
    of :py:class:`aas_types.Capability`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "Capability"
        / "complete.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.Capability] = None

    for something in container.descend():
        if isinstance(something, aas_types.Capability):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of Capability " f"in {path}, but found none."
        )

    return instance


def load_minimal_capability() -> aas_types.Capability:
    """
    Load a minimal example
    of :py:class:`aas_types.Capability`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "Capability"
        / "minimal.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.Capability] = None

    for something in container.descend():
        if isinstance(something, aas_types.Capability):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of Capability " f"in {path}, but found none."
        )

    return instance


def load_complete_concept_description() -> aas_types.ConceptDescription:
    """
    Load a complete example
    of :py:class:`aas_types.ConceptDescription`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "ConceptDescription"
        / "complete.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.ConceptDescription] = None

    for something in container.descend():
        if isinstance(something, aas_types.ConceptDescription):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of ConceptDescription "
            f"in {path}, but found none."
        )

    return instance


def load_minimal_concept_description() -> aas_types.ConceptDescription:
    """
    Load a minimal example
    of :py:class:`aas_types.ConceptDescription`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "ConceptDescription"
        / "minimal.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.ConceptDescription] = None

    for something in container.descend():
        if isinstance(something, aas_types.ConceptDescription):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of ConceptDescription "
            f"in {path}, but found none."
        )

    return instance


def load_complete_reference() -> aas_types.Reference:
    """
    Load a complete example
    of :py:class:`aas_types.Reference`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "Reference"
        / "complete.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.Reference] = None

    for something in container.descend():
        if isinstance(something, aas_types.Reference):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of Reference " f"in {path}, but found none."
        )

    return instance


def load_minimal_reference() -> aas_types.Reference:
    """
    Load a minimal example
    of :py:class:`aas_types.Reference`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "Reference"
        / "minimal.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.Reference] = None

    for something in container.descend():
        if isinstance(something, aas_types.Reference):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of Reference " f"in {path}, but found none."
        )

    return instance


def load_complete_key() -> aas_types.Key:
    """
    Load a complete example
    of :py:class:`aas_types.Key`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "Key"
        / "complete.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.Key] = None

    for something in container.descend():
        if isinstance(something, aas_types.Key):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of Key " f"in {path}, but found none."
        )

    return instance


def load_minimal_key() -> aas_types.Key:
    """
    Load a minimal example
    of :py:class:`aas_types.Key`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "Key"
        / "minimal.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.Key] = None

    for something in container.descend():
        if isinstance(something, aas_types.Key):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of Key " f"in {path}, but found none."
        )

    return instance


def load_complete_lang_string() -> aas_types.LangString:
    """
    Load a complete example
    of :py:class:`aas_types.LangString`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "LangString"
        / "complete.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.LangString] = None

    for something in container.descend():
        if isinstance(something, aas_types.LangString):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of LangString " f"in {path}, but found none."
        )

    return instance


def load_minimal_lang_string() -> aas_types.LangString:
    """
    Load a minimal example
    of :py:class:`aas_types.LangString`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "LangString"
        / "minimal.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.LangString] = None

    for something in container.descend():
        if isinstance(something, aas_types.LangString):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of LangString " f"in {path}, but found none."
        )

    return instance


def load_complete_environment() -> aas_types.Environment:
    """
    Load a complete example
    of :py:class:`aas_types.Environment`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "SelfContained"
        / "Expected"
        / "Environment"
        / "complete.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    return aas_jsonization.environment_from_jsonable(jsonable)


def load_minimal_environment() -> aas_types.Environment:
    """
    Load a minimal example
    of :py:class:`aas_types.Environment`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "SelfContained"
        / "Expected"
        / "Environment"
        / "minimal.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    return aas_jsonization.environment_from_jsonable(jsonable)


def load_complete_embedded_data_specification() -> aas_types.EmbeddedDataSpecification:
    """
    Load a complete example
    of :py:class:`aas_types.EmbeddedDataSpecification`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "EmbeddedDataSpecification"
        / "complete.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.EmbeddedDataSpecification] = None

    for something in container.descend():
        if isinstance(something, aas_types.EmbeddedDataSpecification):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of EmbeddedDataSpecification "
            f"in {path}, but found none."
        )

    return instance


def load_minimal_embedded_data_specification() -> aas_types.EmbeddedDataSpecification:
    """
    Load a minimal example
    of :py:class:`aas_types.EmbeddedDataSpecification`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "EmbeddedDataSpecification"
        / "minimal.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.EmbeddedDataSpecification] = None

    for something in container.descend():
        if isinstance(something, aas_types.EmbeddedDataSpecification):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of EmbeddedDataSpecification "
            f"in {path}, but found none."
        )

    return instance


def load_complete_value_reference_pair() -> aas_types.ValueReferencePair:
    """
    Load a complete example
    of :py:class:`aas_types.ValueReferencePair`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "ValueReferencePair"
        / "complete.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.ValueReferencePair] = None

    for something in container.descend():
        if isinstance(something, aas_types.ValueReferencePair):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of ValueReferencePair "
            f"in {path}, but found none."
        )

    return instance


def load_minimal_value_reference_pair() -> aas_types.ValueReferencePair:
    """
    Load a minimal example
    of :py:class:`aas_types.ValueReferencePair`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "ValueReferencePair"
        / "minimal.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.ValueReferencePair] = None

    for something in container.descend():
        if isinstance(something, aas_types.ValueReferencePair):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of ValueReferencePair "
            f"in {path}, but found none."
        )

    return instance


def load_complete_value_list() -> aas_types.ValueList:
    """
    Load a complete example
    of :py:class:`aas_types.ValueList`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "ValueList"
        / "complete.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.ValueList] = None

    for something in container.descend():
        if isinstance(something, aas_types.ValueList):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of ValueList " f"in {path}, but found none."
        )

    return instance


def load_minimal_value_list() -> aas_types.ValueList:
    """
    Load a minimal example
    of :py:class:`aas_types.ValueList`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "ValueList"
        / "minimal.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.ValueList] = None

    for something in container.descend():
        if isinstance(something, aas_types.ValueList):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of ValueList " f"in {path}, but found none."
        )

    return instance


def load_complete_data_specification_iec_61360() -> aas_types.DataSpecificationIEC61360:
    """
    Load a complete example
    of :py:class:`aas_types.DataSpecificationIEC61360`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "DataSpecificationIEC61360"
        / "complete.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.DataSpecificationIEC61360] = None

    for something in container.descend():
        if isinstance(something, aas_types.DataSpecificationIEC61360):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of DataSpecificationIEC61360 "
            f"in {path}, but found none."
        )

    return instance


def load_minimal_data_specification_iec_61360() -> aas_types.DataSpecificationIEC61360:
    """
    Load a minimal example
    of :py:class:`aas_types.DataSpecificationIEC61360`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "DataSpecificationIEC61360"
        / "minimal.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.DataSpecificationIEC61360] = None

    for something in container.descend():
        if isinstance(something, aas_types.DataSpecificationIEC61360):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of DataSpecificationIEC61360 "
            f"in {path}, but found none."
        )

    return instance


def load_complete_data_specification_physical_unit() -> aas_types.DataSpecificationPhysicalUnit:
    """
    Load a complete example
    of :py:class:`aas_types.DataSpecificationPhysicalUnit`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "DataSpecificationPhysicalUnit"
        / "complete.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.DataSpecificationPhysicalUnit] = None

    for something in container.descend():
        if isinstance(something, aas_types.DataSpecificationPhysicalUnit):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of DataSpecificationPhysicalUnit "
            f"in {path}, but found none."
        )

    return instance


def load_minimal_data_specification_physical_unit() -> aas_types.DataSpecificationPhysicalUnit:
    """
    Load a minimal example
    of :py:class:`aas_types.DataSpecificationPhysicalUnit`
    from :py:attr:`tests.common.TEST_DATA_DIR`.
    """
    path = (
        tests.common.TEST_DATA_DIR
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "DataSpecificationPhysicalUnit"
        / "minimal.json"
    )

    with path.open("rt") as fid:
        try:
            jsonable = json.load(fid)
        except json.decoder.JSONDecodeError as exception:
            raise AssertionError(
                f"Unexpected non-JSON content in {path}"
            ) from exception

    container = aas_jsonization.environment_from_jsonable(jsonable)

    instance: Optional[aas_types.DataSpecificationPhysicalUnit] = None

    for something in container.descend():
        if isinstance(something, aas_types.DataSpecificationPhysicalUnit):
            # We pick the least deep instance, so that we can also test for
            # nested instances *etc.*
            instance = something
            break

    if instance is None:
        raise AssertionError(
            f"Expected to find an instance of DataSpecificationPhysicalUnit "
            f"in {path}, but found none."
        )

    return instance


# This code has been automatically generated by:
# dev_scripts/generate_common_jsonization.py
# Do NOT edit or append.
